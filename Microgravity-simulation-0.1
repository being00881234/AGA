% Parameters
L = 1;          % Side length of the cubic container (m)
r = 0.01;       % Radius of particles (m)
N = 10;         % Number of particles
v0 = 0.1;       % Maximum initial velocity component (m/s)
T = 10;         % Total simulation time (s)

% Initialize particle positions and velocities
pos = zeros(N, 3);
for i = 1:N
    while true
        % Random position within bounds, avoiding walls
        candidate = r + (L - 2*r) * rand(1, 3);
        % Check for overlap with previously placed particles
        if i == 1 || all(vecnorm(pos(1:i-1,:)' - candidate') > 2*r)
            pos(i, :) = candidate;
            break;
        end
    end
end
vel = v0 * (2 * rand(N, 3) - 1); % Random velocities in [-v0, v0] for x, y, z

% Simulation variables
t_sim = 0;                     % Current simulation time
event_times = [];              % Record time of each event
event_positions = [];          % Record positions at each event

% Main simulation loop
while t_sim < T
    % --- Calculate time to wall collisions ---
    t_wall = inf * ones(N, 3, 2); % N particles, 3 dimensions, 2 walls (min/max)
    for i = 1:N
        for d = 1:3
            if vel(i, d) > 0
                % Time to hit max wall (e.g., x = L - r)
                t_wall(i, d, 1) = (L - r - pos(i, d)) / vel(i, d);
            elseif vel(i, d) < 0
                % Time to hit min wall (e.g., x = r)
                t_wall(i, d, 2) = (r - pos(i, d)) / vel(i, d);
            end
        end
    end
    t_min_wall = min(t_wall(:)); % Smallest time to any wall collision
    
    % --- Calculate time to particle-particle collisions ---
    t_pp = inf * ones(N, N); % Symmetric matrix for collision times
    for i = 1:N
        for j = i+1:N
            d = pos(i, :) - pos(j, :);    % Relative position
            w = vel(i, :) - vel(j, :);    % Relative velocity
            a = dot(w, w);
            b = 2 * dot(d, w);
            c = dot(d, d) - (2*r)^2;
            if a == 0 % Particles moving parallel or stationary relative to each other
                if b ~= 0
                    t = -c / b;
                    if t > 0
                        t_pp(i, j) = t;
                    end
                end
            else
                discriminant = b^2 - 4*a*c;
                if discriminant > 0
                    t1 = (-b - sqrt(discriminant)) / (2*a);
                    t2 = (-b + sqrt(discriminant)) / (2*a);
                    if t1 > 0
                        t_pp(i, j) = t1;
                    elseif t2 > 0
                        t_pp(i, j) = t2;
                    end
                end
            end
        end
    end
    t_min_pp = min(t_pp(:)); % Smallest time to any particle-particle collision
    
    % --- Determine the next event ---
    if t_min_wall < t_min_pp
        t_min = t_min_wall;
        [i_min, d_min, s_min] = ind2sub(size(t_wall), find(t_wall == t_min_wall, 1));
        event_type = 'wall';
    else
        t_min = t_min_pp;
        [i_min, j_min] = find(t_pp == t_min_pp, 1);
        event_type = 'particle';
    end
    
    % --- Check for end of simulation ---
    if t_min == inf
        break; % No more collisions possible
    end
    
    % --- Advance simulation ---
    t_sim = t_sim + t_min;
    pos = pos + vel * t_min; % Update all positions
    
    % --- Handle collision ---
    if strcmp(event_type, 'wall')
        i = i_min;
        d = d_min;
        vel(i, d) = -vel(i, d); % Reverse velocity component
    elseif strcmp(event_type, 'particle')
        i = i_min;
        j = j_min;
        % Normal vector at collision
        n = (pos(j, :) - pos(i, :)) / norm(pos(j, :) - pos(i, :));
        % Relative velocity projection
        v_rel = dot(vel(i, :) - vel(j, :), n);
        % Update velocities (equal masses, elastic collision)
        vel(i, :) = vel(i, :) - v_rel * n;
        vel(j, :) = vel(j, :) + v_rel * n;
    end
    
    % --- Record event ---
    event_times = [event_times; t_sim];
    event_positions = [event_positions; pos];
end

% --- Optional Visualization ---
figure;
hold on;
for i = 1:N
    % Extract trajectory for particle i
    idx = (i-1)*numel(event_times) + (1:numel(event_times));
    plot3(event_positions(idx, 1), event_positions(idx, 2), event_positions(idx, 3), '.-');
end
xlabel('X (m)');
ylabel('Y (m)');
zlabel('Z (m)');
title('Particle Trajectories in Free-Falling Container');
axis([0 L 0 L 0 L]);
grid on;
view(3);
hold off;
